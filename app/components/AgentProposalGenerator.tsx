"use client";

import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Grid,
  Card,
  CardContent,
  Button,
  Chip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Avatar,
  LinearProgress,
  Alert,
  Snackbar,
  Divider,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Paper,
  Switch,
  FormControlLabel,
  Tooltip,
  IconButton,
} from '@mui/material';
import {
  Psychology as PsychologyIcon,
  AutoAwesome as AutoAwesomeIcon,
  Send as SendIcon,
  Visibility as VisibilityIcon,
  CheckCircle as CheckCircleIcon,
  Warning as WarningIcon,
  TrendingUp as TrendingUpIcon,
  AccountBalance as TreasuryIcon,
  HealthAndSafety as HealthIcon,
  Security as SecurityIcon,
  Settings as SettingsIcon,
  Refresh as RefreshIcon,
} from '@mui/icons-material';
// import agentProposalService, { Insight, AgentGeneratedProposal } from '../services/agentProposalService';
// import dmtTokenService from '../services/dmtTokenService';

// Mock interfaces for testing
interface Insight {
  id: string;
  agentId: string;
  agentName: string;
  type: 'financial' | 'crypto' | 'health' | 'technical' | 'governance';
  title: string;
  description: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  confidence: number;
  data: any;
  createdAt: Date;
  tags: string[];
}

interface AgentGeneratedProposal {
  title: string;
  description: string;
  status: 'active' | 'passed' | 'rejected' | 'executed';
  createdBy: string;
  category: 'treasury' | 'governance' | 'tech' | 'community';
  createdAt: Date;
  deadline: Date;
  votes: { for: number; against: number; abstain: number; total: number };
  quorum: number;
  autoGenerated: boolean;
  sourceAgent: string;
  sourceInsight: string;
  confidence: number;
}

const AgentProposalGenerator: React.FC = () => {
  const [selectedAgent, setSelectedAgent] = useState<string>('');
  const [insights, setInsights] = useState<Insight[]>([]);
  const [selectedInsight, setSelectedInsight] = useState<Insight | null>(null);
  const [generatedProposal, setGeneratedProposal] = useState<AgentGeneratedProposal | null>(null);
  const [showPreviewModal, setShowPreviewModal] = useState(false);
  const [showSubmitModal, setShowSubmitModal] = useState(false);
  const [loading, setLoading] = useState(false);
  const [adminMode, setAdminMode] = useState(false);
  const [walletInfo, setWalletInfo] = useState<any>(null);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' as 'success' | 'error' | 'warning' | 'info' });

  const agents = [
    { id: 'agent-cfo', name: 'Autonomous CFO', icon: TreasuryIcon, color: '#fdcb6e' },
    { id: 'agent-crypto', name: 'Crypto Alpha Assistant', icon: TrendingUpIcon, color: '#00ffff' },
    { id: 'agent-care', name: 'Care Orchestrator', icon: HealthIcon, color: '#2ed573' },
  ];

  useEffect(() => {
    const connectWallet = async () => {
      try {
        // Mock wallet connection
        const mockWallet = {
          address: '3eUD...ZxhQ',
          dmtBalance: 150,
          stakedAmount: 50,
          votingPower: 200,
          isConnected: true,
        };
        setWalletInfo(mockWallet);
      } catch (error) {
        console.error('Failed to connect wallet:', error);
      }
    };
    connectWallet();
  }, []);

  const handleAgentSelect = async (agentId: string) => {
    setSelectedAgent(agentId);
    setLoading(true);
    
    try {
      // Mock insights based on agent type
      const mockInsights: Insight[] = generateMockInsights(agentId);
      
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      setInsights(mockInsights);
    } catch (error) {
      setSnackbar({ open: true, message: 'Failed to fetch insights', severity: 'error' });
    } finally {
      setLoading(false);
    }
  };

  const handleInsightSelect = (insight: Insight) => {
    setSelectedInsight(insight);
    const proposal = generateProposalFromInsight(insight);
    setGeneratedProposal(proposal);
    setShowPreviewModal(true);
  };

  const handleSubmitProposal = async () => {
    if (!generatedProposal || !walletInfo) {
      setSnackbar({ open: true, message: 'Missing proposal or wallet connection', severity: 'error' });
      return;
    }

    setLoading(true);
    try {
      // Mock proposal submission
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      setSnackbar({ 
        open: true, 
        message: `Proposal submitted successfully! +40 XP awarded to ${selectedInsight?.agentName}`, 
        severity: 'success' 
      });
      
      setShowSubmitModal(false);
      setShowPreviewModal(false);
      setSelectedInsight(null);
      setGeneratedProposal(null);
    } catch (error) {
      setSnackbar({ 
        open: true, 
        message: error instanceof Error ? error.message : 'Failed to submit proposal', 
        severity: 'error' 
      });
    } finally {
      setLoading(false);
    }
  };

  const getSeverityColor = (severity: string) => {
    const colorMap: Record<string, string> = {
      low: '#4caf50',
      medium: '#ff9800',
      high: '#f44336',
      critical: '#9c27b0',
    };
    return colorMap[severity] || '#757575';
  };

  const getTypeIcon = (type: string) => {
    const iconMap: Record<string, React.ComponentType> = {
      financial: TreasuryIcon,
      crypto: TrendingUpIcon,
      health: HealthIcon,
      technical: SecurityIcon,
      governance: SettingsIcon,
    };
    return iconMap[type] || PsychologyIcon;
  };

  const getAgentIcon = (agentId: string) => {
    const agent = agents.find(a => a.id === agentId);
    return agent ? agent.icon : PsychologyIcon;
  };

  const getAgentColor = (agentId: string) => {
    const agent = agents.find(a => a.id === agentId);
    return agent ? agent.color : '#757575';
  };

  // Mock functions for testing
  const generateMockInsights = (agentId: string): Insight[] => {
    const insights: Insight[] = [];

    switch (agentId) {
      case 'agent-cfo':
        insights.push(
          {
            id: 'insight-cfo-1',
            agentId: 'agent-cfo',
            agentName: 'Autonomous CFO',
            type: 'financial',
            title: 'Treasury Diversification Strategy',
            description: 'Analysis shows 85% of treasury is in volatile assets. Recommend diversifying 30% into stable assets to reduce risk exposure.',
            severity: 'high',
            confidence: 92,
            data: { volatility: 0.85, recommendation: 'diversify', target: 0.30 },
            createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000),
            tags: ['treasury', 'risk', 'diversification'],
          },
          {
            id: 'insight-cfo-2',
            agentId: 'agent-cfo',
            agentName: 'Autonomous CFO',
            type: 'financial',
            title: 'Staking Rewards Optimization',
            description: 'Current staking rewards are 12% APY. Market analysis suggests increasing to 15% APY would attract 40% more stakers.',
            severity: 'medium',
            confidence: 78,
            data: { currentAPY: 0.12, suggestedAPY: 0.15, expectedGrowth: 0.40 },
            createdAt: new Date(Date.now() - 4 * 60 * 60 * 1000),
            tags: ['staking', 'rewards', 'optimization'],
          }
        );
        break;

      case 'agent-crypto':
        insights.push(
          {
            id: 'insight-crypto-1',
            agentId: 'agent-crypto',
            agentName: 'Crypto Alpha Assistant',
            type: 'crypto',
            title: 'Cross-Chain Bridge Implementation',
            description: 'Market analysis shows 60% of users need cross-chain functionality. Implementing Solana-Ethereum bridge would increase user adoption by 45%.',
            severity: 'high',
            confidence: 88,
            data: { userDemand: 0.60, expectedAdoption: 0.45, chains: ['solana', 'ethereum'] },
            createdAt: new Date(Date.now() - 1 * 60 * 60 * 1000),
            tags: ['cross-chain', 'bridge', 'adoption'],
          },
          {
            id: 'insight-crypto-2',
            agentId: 'agent-crypto',
            agentName: 'Crypto Alpha Assistant',
            type: 'crypto',
            title: 'DeFi Integration Strategy',
            description: 'Analysis of top DeFi protocols shows integration opportunities that could increase TVL by 200%. Recommend prioritizing Uniswap and Aave integrations.',
            severity: 'medium',
            confidence: 75,
            data: { tvlIncrease: 2.0, protocols: ['uniswap', 'aave'], priority: 'high' },
            createdAt: new Date(Date.now() - 3 * 60 * 60 * 1000),
            tags: ['defi', 'integration', 'tvl'],
          }
        );
        break;

      case 'agent-care':
        insights.push(
          {
            id: 'insight-care-1',
            agentId: 'agent-care',
            agentName: 'Care Orchestrator',
            type: 'health',
            title: 'Community Wellness Program',
            description: 'Health data analysis shows 70% of community members report stress levels above normal. Recommend implementing a comprehensive wellness program.',
            severity: 'high',
            confidence: 85,
            data: { stressLevel: 0.70, recommendation: 'wellness_program', target: 'community' },
            createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000),
            tags: ['wellness', 'stress', 'community'],
          },
          {
            id: 'insight-care-2',
            agentId: 'agent-care',
            agentName: 'Care Orchestrator',
            type: 'health',
            title: 'Mental Health Support Initiative',
            description: 'Analysis indicates need for mental health resources. Recommend establishing a community mental health support fund with 100K DMT allocation.',
            severity: 'medium',
            confidence: 82,
            data: { need: 'mental_health', allocation: 100000, currency: 'DMT' },
            createdAt: new Date(Date.now() - 5 * 60 * 60 * 1000),
            tags: ['mental_health', 'support', 'funding'],
          }
        );
        break;

      default:
        insights.push({
          id: 'insight-default-1',
          agentId: agentId,
          agentName: 'Unknown Agent',
          type: 'governance',
          title: 'General Recommendation',
          description: 'Agent has identified a potential improvement opportunity.',
          severity: 'low',
          confidence: 50,
          data: {},
          createdAt: new Date(),
          tags: ['general'],
        });
    }

    return insights;
  };

  const generateProposalFromInsight = (insight: Insight): AgentGeneratedProposal => {
    const baseProposal = {
      status: 'active' as const,
      createdBy: 'auto-generated',
      createdAt: new Date(),
      deadline: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
      votes: { for: 0, against: 0, abstain: 0, total: 0 },
      quorum: 1000,
      autoGenerated: true,
      sourceAgent: insight.agentId,
      sourceInsight: insight.id,
      confidence: insight.confidence,
    };

    switch (insight.type) {
      case 'financial':
        return {
          ...baseProposal,
          title: `Financial Optimization: ${insight.title}`,
          description: `Based on financial analysis by ${insight.agentName}, this proposal addresses: ${insight.description}\n\nConfidence: ${insight.confidence}%\nSeverity: ${insight.severity.toUpperCase()}`,
          category: 'treasury',
        };

      case 'crypto':
        return {
          ...baseProposal,
          title: `Crypto Strategy: ${insight.title}`,
          description: `Crypto Alpha Assistant identified: ${insight.description}\n\nThis proposal suggests implementing the recommended strategy.\nConfidence: ${insight.confidence}%\nSeverity: ${insight.severity.toUpperCase()}`,
          category: 'tech',
        };

      case 'health':
        return {
          ...baseProposal,
          title: `Health Initiative: ${insight.title}`,
          description: `Care Orchestrator recommends: ${insight.description}\n\nThis proposal aims to improve community health and wellness.\nConfidence: ${insight.confidence}%\nSeverity: ${insight.severity.toUpperCase()}`,
          category: 'community',
        };

      case 'technical':
        return {
          ...baseProposal,
          title: `Technical Improvement: ${insight.title}`,
          description: `Technical analysis suggests: ${insight.description}\n\nThis proposal outlines the recommended technical changes.\nConfidence: ${insight.confidence}%\nSeverity: ${insight.severity.toUpperCase()}`,
          category: 'tech',
        };

      case 'governance':
        return {
          ...baseProposal,
          title: `Governance Enhancement: ${insight.title}`,
          description: `Governance analysis indicates: ${insight.description}\n\nThis proposal suggests improvements to the governance system.\nConfidence: ${insight.confidence}%\nSeverity: ${insight.severity.toUpperCase()}`,
          category: 'governance',
        };

      default:
        return {
          ...baseProposal,
          title: `Agent Recommendation: ${insight.title}`,
          description: `${insight.agentName} suggests: ${insight.description}\n\nConfidence: ${insight.confidence}%\nSeverity: ${insight.severity.toUpperCase()}`,
          category: 'governance',
        };
    }
  };

  return (
    <Box sx={{ p: 3 }}>
      {/* Header */}
      <Box sx={{ mb: 4 }}>
        <Typography variant="h3" sx={{ color: '#00ffff', mb: 2, fontWeight: 'bold', display: 'flex', alignItems: 'center', gap: 2 }}>
          <AutoAwesomeIcon sx={{ fontSize: 40 }} />
          Agent Proposal Generator
        </Typography>
        <Typography variant="h6" sx={{ color: 'rgba(255, 255, 255, 0.7)', mb: 3 }}>
          Transform agent insights into DAO proposals automatically
        </Typography>
      </Box>

      {/* Admin Mode Toggle */}
      <Card sx={{
        mb: 3,
        background: 'rgba(25, 25, 25, 0.9)',
        border: '2px solid #e84393',
        borderRadius: '12px',
        backdropFilter: 'blur(10px)',
      }}>
        <CardContent>
          <Box display="flex" alignItems="center" justifyContent="space-between">
            <Box display="flex" alignItems="center" gap={2}>
              <SettingsIcon sx={{ color: '#e84393', fontSize: 24 }} />
              <Box>
                <Typography variant="h6" sx={{ color: '#ffffff', fontWeight: 'bold' }}>
                  Admin Mode
                </Typography>
                <Typography variant="body2" sx={{ color: '#b0b0b0' }}>
                  Enable agent proposal generation features
                </Typography>
              </Box>
            </Box>
            <FormControlLabel
              control={
                <Switch
                  checked={adminMode}
                  onChange={(e) => setAdminMode(e.target.checked)}
                  sx={{
                    '& .MuiSwitch-switchBase.Mui-checked': {
                      color: '#e84393',
                    },
                    '& .MuiSwitch-switchBase.Mui-checked + .MuiSwitch-track': {
                      backgroundColor: '#e84393',
                    },
                  }}
                />
              }
              label=""
            />
          </Box>
        </CardContent>
      </Card>

      {!adminMode ? (
        <Alert severity="info" sx={{ mb: 3 }}>
          Enable Admin Mode to access agent proposal generation features.
        </Alert>
      ) : (
        <>
          {/* Agent Selection */}
          <Card sx={{
            mb: 3,
            background: 'rgba(25, 25, 25, 0.9)',
            border: '2px solid #00ffff',
            borderRadius: '12px',
            backdropFilter: 'blur(10px)',
          }}>
            <CardContent>
              <Typography variant="h6" sx={{ color: '#ffffff', mb: 2, fontWeight: 'bold' }}>
                Select Agent
              </Typography>
              <Grid container spacing={2}>
                {agents.map((agent) => {
                  const AgentIcon = agent.icon;
                  return (
                    <Grid item xs={12} sm={4} key={agent.id}>
                      <Card
                        sx={{
                          background: selectedAgent === agent.id ? 'rgba(0, 255, 255, 0.1)' : 'rgba(255, 255, 255, 0.05)',
                          border: selectedAgent === agent.id ? '2px solid #00ffff' : '1px solid rgba(255, 255, 255, 0.1)',
                          borderRadius: '8px',
                          cursor: 'pointer',
                          transition: 'all 0.3s ease',
                          '&:hover': {
                            backgroundColor: 'rgba(0, 255, 255, 0.1)',
                            borderColor: '#00ffff',
                          }
                        }}
                        onClick={() => handleAgentSelect(agent.id)}
                      >
                        <CardContent sx={{ textAlign: 'center', py: 2 }}>
                          <Avatar sx={{ 
                            width: 50, 
                            height: 50, 
                            mx: 'auto', 
                            mb: 1,
                            backgroundColor: `${agent.color}20`,
                            border: `2px solid ${agent.color}`
                          }}>
                            <AgentIcon sx={{ color: agent.color, fontSize: 28 }} />
                          </Avatar>
                          <Typography variant="h6" sx={{ color: '#ffffff', fontWeight: 'bold' }}>
                            {agent.name}
                          </Typography>
                        </CardContent>
                      </Card>
                    </Grid>
                  );
                })}
              </Grid>
            </CardContent>
          </Card>

          {/* Insights Display */}
          {selectedAgent && (
            <Card sx={{
              mb: 3,
              background: 'rgba(25, 25, 25, 0.9)',
              border: '2px solid #2ed573',
              borderRadius: '12px',
              backdropFilter: 'blur(10px)',
            }}>
              <CardContent>
                <Box display="flex" alignItems="center" justifyContent="space-between" mb={2}>
                  <Typography variant="h6" sx={{ color: '#ffffff', fontWeight: 'bold' }}>
                    Available Insights
                  </Typography>
                  <IconButton
                    onClick={() => handleAgentSelect(selectedAgent)}
                    sx={{ color: '#2ed573' }}
                  >
                    <RefreshIcon />
                  </IconButton>
                </Box>

                {loading ? (
                  <Box textAlign="center" py={4}>
                    <LinearProgress sx={{ mb: 2 }} />
                    <Typography variant="body2" sx={{ color: '#b0b0b0' }}>
                      Fetching insights from {agents.find(a => a.id === selectedAgent)?.name}...
                    </Typography>
                  </Box>
                ) : insights.length === 0 ? (
                  <Typography variant="body2" sx={{ color: '#b0b0b0', textAlign: 'center', py: 4 }}>
                    No insights available for this agent.
                  </Typography>
                ) : (
                  <Grid container spacing={2}>
                    {insights.map((insight) => {
                      const TypeIcon = getTypeIcon(insight.type);
                      const AgentIcon = getAgentIcon(insight.agentId);
                      const agentColor = getAgentColor(insight.agentId);
                      
                      return (
                        <Grid item xs={12} md={6} key={insight.id}>
                          <Card
                            sx={{
                              background: 'rgba(255, 255, 255, 0.05)',
                              border: '1px solid rgba(255, 255, 255, 0.1)',
                              borderRadius: '8px',
                              cursor: 'pointer',
                              transition: 'all 0.3s ease',
                              '&:hover': {
                                backgroundColor: 'rgba(255, 255, 255, 0.1)',
                                borderColor: '#2ed573',
                              }
                            }}
                            onClick={() => handleInsightSelect(insight)}
                          >
                            <CardContent>
                              <Box display="flex" alignItems="start" gap={2} mb={2}>
                                <Avatar sx={{ 
                                  width: 40, 
                                  height: 40,
                                  backgroundColor: `${agentColor}20`,
                                  border: `2px solid ${agentColor}`
                                }}>
                                  <AgentIcon sx={{ color: agentColor, fontSize: 20 }} />
                                </Avatar>
                                <Box flex={1}>
                                  <Typography variant="h6" sx={{ color: '#ffffff', fontWeight: 'bold', mb: 1 }}>
                                    {insight.title}
                                  </Typography>
                                  <Typography variant="body2" sx={{ color: '#b0b0b0', mb: 2 }}>
                                    {insight.description}
                                  </Typography>
                                </Box>
                              </Box>

                              <Box display="flex" alignItems="center" gap={2} mb={2}>
                                <Chip
                                  icon={<TypeIcon />}
                                  label={insight.type.toUpperCase()}
                                  size="small"
                                  sx={{
                                    backgroundColor: '#00ffff',
                                    color: '#000',
                                    fontWeight: 'bold',
                                    fontSize: '0.7rem'
                                  }}
                                />
                                <Chip
                                  label={insight.severity.toUpperCase()}
                                  size="small"
                                  sx={{
                                    backgroundColor: getSeverityColor(insight.severity),
                                    color: '#ffffff',
                                    fontWeight: 'bold',
                                    fontSize: '0.7rem'
                                  }}
                                />
                                <Chip
                                  label={`${insight.confidence}% Confidence`}
                                  size="small"
                                  sx={{
                                    backgroundColor: '#fdcb6e',
                                    color: '#000',
                                    fontWeight: 'bold',
                                    fontSize: '0.7rem'
                                  }}
                                />
                              </Box>

                              <Box display="flex" alignItems="center" justifyContent="space-between">
                                <Typography variant="caption" sx={{ color: '#b0b0b0' }}>
                                  {insight.createdAt.toLocaleString()}
                                </Typography>
                                <Button
                                  variant="outlined"
                                  size="small"
                                  startIcon={<VisibilityIcon />}
                                  sx={{
                                    borderColor: '#2ed573',
                                    color: '#2ed573',
                                    '&:hover': { borderColor: '#2ed573', backgroundColor: 'rgba(46, 213, 115, 0.1)' }
                                  }}
                                >
                                  Generate Proposal
                                </Button>
                              </Box>
                            </CardContent>
                          </Card>
                        </Grid>
                      );
                    })}
                  </Grid>
                )}
              </CardContent>
            </Card>
          )}
        </>
      )}

      {/* Proposal Preview Modal */}
      <Dialog
        open={showPreviewModal}
        onClose={() => setShowPreviewModal(false)}
        maxWidth="md"
        fullWidth
        PaperProps={{
          sx: {
            bgcolor: 'rgba(25, 25, 25, 0.95)',
            color: 'white',
            border: '2px solid #00ffff',
            borderRadius: 2,
          }
        }}
      >
        <DialogTitle sx={{ color: '#00ffff', borderBottom: '1px solid #00ffff', display: 'flex', alignItems: 'center', gap: 1 }}>
          <AutoAwesomeIcon />
          Generated Proposal Preview
        </DialogTitle>
        <DialogContent sx={{ mt: 2 }}>
          {generatedProposal && selectedInsight && (
            <Box>
              {/* Source Information */}
              <Box sx={{ p: 2, backgroundColor: 'rgba(0, 255, 255, 0.1)', borderRadius: 1, mb: 3 }}>
                <Typography variant="h6" sx={{ color: '#00ffff', mb: 1 }}>
                  Source Information
                </Typography>
                <Typography variant="body2" sx={{ color: '#ffffff' }}>
                  • Generated by: {selectedInsight.agentName}
                </Typography>
                <Typography variant="body2" sx={{ color: '#ffffff' }}>
                  • Insight Type: {selectedInsight.type.toUpperCase()}
                </Typography>
                <Typography variant="body2" sx={{ color: '#ffffff' }}>
                  • Confidence Level: {selectedInsight.confidence}%
                </Typography>
                <Typography variant="body2" sx={{ color: '#ffffff' }}>
                  • Severity: {selectedInsight.severity.toUpperCase()}
                </Typography>
              </Box>

              {/* Proposal Details */}
              <Typography variant="h6" sx={{ color: '#ffffff', mb: 2 }}>
                Proposal Title
              </Typography>
              <Typography variant="body1" sx={{ color: '#b0b0b0', mb: 3 }}>
                {generatedProposal.title}
              </Typography>

              <Typography variant="h6" sx={{ color: '#ffffff', mb: 2 }}>
                Proposal Description
              </Typography>
              <Typography variant="body1" sx={{ color: '#b0b0b0', mb: 3, whiteSpace: 'pre-wrap' }}>
                {generatedProposal.description}
              </Typography>

              <Typography variant="h6" sx={{ color: '#ffffff', mb: 2 }}>
                Proposal Details
              </Typography>
              <Box display="flex" gap={2} mb={3}>
                <Chip
                  label={`Category: ${generatedProposal.category.toUpperCase()}`}
                  sx={{
                    backgroundColor: '#fdcb6e',
                    color: '#000',
                    fontWeight: 'bold'
                  }}
                />
                <Chip
                  label={`Duration: 7 days`}
                  sx={{
                    backgroundColor: '#2ed573',
                    color: '#000',
                    fontWeight: 'bold'
                  }}
                />
                <Chip
                  label={`Auto-Generated`}
                  sx={{
                    backgroundColor: '#e84393',
                    color: '#ffffff',
                    fontWeight: 'bold'
                  }}
                />
              </Box>

              {/* XP Reward Info */}
              <Alert severity="info" sx={{ mb: 2 }}>
                Submitting this proposal will award +40 XP to {selectedInsight.agentName}
              </Alert>
            </Box>
          )}
        </DialogContent>
        <DialogActions sx={{ p: 3 }}>
          <Button
            onClick={() => setShowPreviewModal(false)}
            sx={{ color: '#b0b0b0' }}
          >
            Cancel
          </Button>
          <Button
            onClick={() => {
              setShowPreviewModal(false);
              setShowSubmitModal(true);
            }}
            variant="contained"
            startIcon={<SendIcon />}
            sx={{
              backgroundColor: '#00ffff',
              color: '#000',
              '&:hover': { backgroundColor: '#00e5e5' }
            }}
          >
            Submit as DAO Proposal
          </Button>
        </DialogActions>
      </Dialog>

      {/* Submit Confirmation Modal */}
      <Dialog
        open={showSubmitModal}
        onClose={() => setShowSubmitModal(false)}
        PaperProps={{
          sx: {
            bgcolor: 'rgba(25, 25, 25, 0.95)',
            color: 'white',
            border: '2px solid #2ed573',
            borderRadius: 2,
          }
        }}
      >
        <DialogTitle sx={{ color: '#2ed573', borderBottom: '1px solid #2ed573', display: 'flex', alignItems: 'center', gap: 1 }}>
          <CheckCircleIcon />
          Confirm Proposal Submission
        </DialogTitle>
        <DialogContent sx={{ mt: 2 }}>
          <Typography variant="body1" sx={{ color: '#ffffff', mb: 2 }}>
            Are you sure you want to submit this auto-generated proposal to the DAO?
          </Typography>
          <Alert severity="warning" sx={{ mb: 2 }}>
            This action cannot be undone. The proposal will be live for community voting.
          </Alert>
          {generatedProposal && (
            <Box sx={{ p: 2, backgroundColor: 'rgba(46, 213, 115, 0.1)', borderRadius: 1 }}>
              <Typography variant="body2" sx={{ color: '#2ed573', fontWeight: 'bold', mb: 1 }}>
                Proposal Summary:
              </Typography>
              <Typography variant="body2" sx={{ color: '#ffffff' }}>
                • Title: {generatedProposal.title}
              </Typography>
              <Typography variant="body2" sx={{ color: '#ffffff' }}>
                • Category: {generatedProposal.category.toUpperCase()}
              </Typography>
              <Typography variant="body2" sx={{ color: '#ffffff' }}>
                • XP Reward: +40 XP to {selectedInsight?.agentName}
              </Typography>
            </Box>
          )}
        </DialogContent>
        <DialogActions sx={{ p: 3 }}>
          <Button
            onClick={() => setShowSubmitModal(false)}
            sx={{ color: '#b0b0b0' }}
          >
            Cancel
          </Button>
          <Button
            onClick={handleSubmitProposal}
            variant="contained"
            disabled={loading}
            startIcon={loading ? <LinearProgress /> : <SendIcon />}
            sx={{
              backgroundColor: '#2ed573',
              color: '#000',
              '&:hover': { backgroundColor: '#26d067' },
              '&:disabled': { backgroundColor: '#666', color: '#999' }
            }}
          >
            {loading ? 'Submitting...' : 'Submit Proposal'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Snackbar */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
      >
        <Alert
          onClose={() => setSnackbar({ ...snackbar, open: false })}
          severity={snackbar.severity}
          sx={{ width: '100%' }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default AgentProposalGenerator;
